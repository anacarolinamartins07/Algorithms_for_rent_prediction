# -*- coding: utf-8 -*-
"""Aluguel - Regressão Linear

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zi0grG7yQoZKnarf5WF9lvlTySrETRHx

## Prevendo o valor do aluguel *(Machine learning supervisionado)*, com algoritmo para regressão (Regressão Linear).

#####**COLETA** **E** **ANÁLISE** **DE** **DADOS**
"""

import pandas as pd #importando a biblioteca para ler os dados

# Criando um Data frame com a importação de um arquivo csv, para fazermos o tratamento dos dados contidos no arquivo.
df = pd.read_csv("/content/aluguel.csv", sep=";")
df.head() #serve para nos mostrar como está o df

df.describe() #serve para nos mostrar informações como média, mínimo, máximo etc.

df.columns #para ver o nome das colunas (não é necessario se você quiser)

#definindo minhas features
x = df[['area']]
y = df['valor_aluguel']

#tecnica hold out
from sklearn.model_selection import train_test_split #importando biblioteca para treino
xtreino , xteste, ytreino, yteste = train_test_split (x, y,test_size= 0.25) #dividindo os dados para treino e teste

#modelagem dos dados
from sklearn.linear_model import LinearRegression #importando biblioteca de regressao linear
regressao= LinearRegression()

regressao.fit(xtreino,ytreino) #treinando o modelo

y_hat= regressao.predict(xteste) #validando o modelo

#erro quadrático médio
from sklearn.metrics import mean_squared_error #importando biblioteca do erro quadrático médio

eqm= mean_squared_error(yteste, y_hat)
print('O eqm foi: ', round(eqm,2))

"""#### INCLUINDO VÁRIAVEL "QUARTOS"

---


"""

#definindo minhas features
x = df[['area','mobiliaria','quartos']]
y = df['valor_aluguel']

xtreino, xteste, ytreino, yteste= train_test_split(x,y, test_size=0.25)

from sklearn.linear_model import LinearRegression
regressao= LinearRegression()

regressao.fit(xtreino,ytreino)

y_hat= regressao.predict(xteste)

eqm = mean_squared_error(yteste, y_hat)
print('O eqm foi: ', round(eqm,2))

"""###### INCLUINDO VÁRIAVEL "MOBILIARIA"


"""

x = df[['area','mobiliaria']]
y = df['valor_aluguel']

xtreino, xteste, ytreino, yteste= train_test_split(x,y, test_size=0.25)

regressao= LinearRegression()

regressao.fit(xtreino,ytreino)

y_hat= regressao.predict(xteste)

eqm = mean_squared_error(yteste, y_hat)
print('O eqm foi: ', round(eqm,2))

"""#### CONCLUSÃO

A cada features que adicionamos elas podem ou não melhorar a nossa previsão, dependendo do quão relevante ela é para nossa váriavel que queremos prever. Neste caso com uma quantidade maior de features o modelo ficou melhor, como podemos ver abaixo:

Com apenas uma features esse foi o valor da previsão do aluguel: 15896037.823920913

Com duas features já podemos ver melhoria, o valor da previsão foi de:  69613185

Já com três features o resultado do valor do aluguel foi de: 7018013
"""

#Criando uma função genérica para prever qualquer novo imóvel cadastrado na plataforma
areacliente= int(input("digite qual a área do seu imóvel? "))
numeroquarcli= int(input("digite quantos quartos tem o seu imóvel "))
mobiliado= input("seu imóvel é mobiliado? (sim ou nã0) ")

#criar um dicionario com os dados para ele substituir os dados em cada váriavel, area, quartos e mobiliaria
dados= {'area': [areacliente], 'quartos' : [numeroquarcli], 'mobiliaria': [mobiliado]}
print(dados)

# Criar o DataFrame
df = pd.DataFrame(dados)
df.head()

#trocando os valores que são str para valores inteiros, pois regressao linear não aceita str apenas numeros
df["mobiliaria"] =  df["mobiliaria"].map({"Sim":1, "Não":0})

#calculando o valor do aluguel
valor_aluguel = regressao.predict(xteste)
print("O valor de aluguel sugerido para seu imóvel é:",valor_aluguel )